var ArgumentError, Property, escapeRegExp, _;

_ = require('underscore');

ArgumentError = require('common-errors').ArgumentError;

escapeRegExp = function(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
};


/* Property */

Property = (function() {
  function Property(string) {
    var split;
    if (!Property.isParseableString(string)) {
      throw new ArgumentError('property string could not be split on an "=" token');
    }
    split = string.split('=');
    this.string = string;
    this.key = split.shift().trim();
    this.value = split.join('').trim();
  }

  Property.prototype.toRegExp = function(delimiter) {
    var splitToken;
    if (!(delimiter && _.isString(delimiter))) {
      throw new ArgumentError('invalid string passed to toRegExp()');
    }
    splitToken = delimiter.split('*');
    if (splitToken.length > 2) {
      throw new ArgumentError('property string could not be split on a single "*" delimiter');
    } else if (splitToken.length === 1) {
      splitToken = [splitToken[0], splitToken[0]];
    }
    return new RegExp(escapeRegExp(splitToken[0]) + escapeRegExp(this.key) + escapeRegExp(splitToken[1]), 'g');
  };

  Property.prototype.filterString = function(string, delimiter) {
    var regex;
    regex = this.toRegExp(delimiter);
    return string.replace(regex, this.value);
  };

  return Property;

})();

Property.isParseableString = function(string) {
  return (string.match(/\=/g) || []).length >= 1;
};

module.exports = Property;
